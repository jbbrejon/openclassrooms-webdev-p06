// SCRIPT DESCRIPTION : Controller for "/api/auth/signup" and "api/auth/login" POST requests (called from ../routes/user.js)

// Module dependencies
const bcrypt = require('bcrypt'); // https://www.npmjs.com/package/bcrypt
const jwt = require('jsonwebtoken'); // https://www.npmjs.com/package/jsonwebtoken
const env = require('dotenv').config(); // https://www.npmjs.com/package/dotenv
const User = require('../models/User'); // local module (Mongoose model)

// Set variable : token string for 'sign()' method of jsonwebtoken
const tokenString = process.env.JSON_WEB_TOKEN; // Toeken string to be set in ./.env (not synced with git)

// Set signup commands
exports.signup = (req, res, next) => {
    bcrypt.hash(req.body.password, 10) // Call "hash() method from bcrypt module" (arguments : password from post request, rounds to run hash algorythm)
        .then(hash => {
            const user = new User({
                email: req.body.email,
                password: hash
            }); // create new user based on mongoose model (arguments : email, password hashed by bcrypt)
            user.save() // Call "save()" method from mongoose module
                .then(() => res.status(201).json({ message: 'User created!' })) // If succes -> return status code 201 and confirmation message
                .catch(error => res.status(400).json({ error })); // If error -> return status code "400" and error message
        })
        .catch(error => res.status(500).json({ error })); // Display error if issue with hash() method
};

// Set login commands
exports.login = (req, res, next) => {
    User.findOne({ email: req.body.email }) // Call "findOne() method from mongoose module to check if the user exists" (filter : email from post request)
        .then(user => {
            if (!user) {
                return res.status(401).json({ error: 'User not found!' })
            } // If user's email not found in MongoDB -> Return status code 401 with specified error
            bcrypt.compare(req.body.password, user.password) // Call "compare()" method from bcrypt module (arguments : password from request, hashed password from MongoDB)
                .then(valid => {
                    if (!valid) {
                        return res.status(401).json({ error: 'Incorrect password!' });
                    } // If the password doesn't match with the hashed password -> Return status code 401 with specified error
                    res.status(200).json({
                        userId: user._id,
                        token: jwt.sign(
                            { userId: user._id },
                            tokenString,
                            { expiresIn: '24h' }
                        ) // call sign() method of jsonwebtoken module (arguments : user's id from MongoDB, token string, expiration)
                    }); // If password is correct, then return user's id from MongoDB and token generated by jsonwebtoken
                })
                .catch(error => res.status(500).json({ error })); // Return error if authentication fails
        })
        .catch(error => res.status(500).json({ error })) // // Return error if authentication fails
};